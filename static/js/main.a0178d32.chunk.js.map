{"version":3,"sources":["components/card/Card.js","components/card/CardList.js","components/header/SearchBox.js","containers/errorBoundary/ErrorBoundary.js","components/scroll/Scroll.js","components/CounterButton.js","components/header/Header.js","containers/app/App.js","store/actions/searchAction.js","store/constants.js","store/actions/requestAction.js","serviceWorker.js","store/reducers/searchReducer.js","store/reducers/requestReducer.js","index.js"],"names":["Card","roboData","className","src","id","alt","name","email","CardList","robotsArray","robots","map","robot","key","SearchBox","searchField","handleChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","errorInfo","this","setState","props","children","Component","Scroll","CounterButton","count","updateCount","prevState","nextProps","nextState","color","onClick","Header","React","App","componentDidMount","a","requestRobots","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","dispatch","evt","payload","target","value","fetch","then","res","json","data","catch","err","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","store","createLogger","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a0178d32.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ roboData }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${ roboData.id }?200x200`} alt=\"robots\"/>\n      <div>\n        <h2>{ roboData.name }</h2>\n        <p>{ roboData.email }</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  let robotsArray = robots.map( robot => <Card roboData={ robot } key={ robot.id }/> );\n  // throw new Error(\"ERR!\");\n  return (\n    <div id=\"cardlist\">\n      { robotsArray }\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchField, handleChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        type=\"search\"\n        placeholder=\"search robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        onChange={ handleChange }\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch ( error, errorInfo ) {\n    this.setState({ hasError: true });\n\n  }\n\n  render () {\n    return this.state.hasError ?\n      (<h1>Ooooooops...</h1>):\n      this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport './scroll.css';\n\nconst Scroll = ( props ) => {\n  return (\n    <div id=\"scroll\">\n      { props.children }\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  state = {\n    count: 0\n  };\n\n  shouldComponentUpdate ( nextProps, nextState ) {\n    return this.state.count !== nextState.count;\n  };\n\n  updateCount = () => {\n    this.setState( prevState => ({ count: prevState.count + 1 }));\n  };\n\n  render () {\n    return (\n      <button color={ this.props.color } onClick={ this.updateCount }>\n        Count: { this.state.count }\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React from 'react';\nimport CounterButton from \"../CounterButton\";\n\nclass Header extends React.Component {\n  shouldComponentUpdate ( nextProps, nextState ) {\n    return false;\n  }\n\n  render () {\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={ 'red' }/>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport CardList from \"../../components/card/CardList\";\nimport SearchBox from \"../../components/header/SearchBox\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport Scroll from \"../../components/scroll/Scroll\";\nimport { setSearchField } from \"../../store/actions/searchAction\";\nimport { requestRobots } from \"../../store/actions/requestAction\";\n\nimport './App.css';\nimport Header from \"../../components/header/Header\";\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleChange: evt => dispatch( setSearchField( evt.target.value )),\n  requestRobots: () => dispatch( requestRobots())\n});\n\nclass App extends React.Component {\n  componentDidMount = async () => {\n    this.props.requestRobots();\n  };\n\n    render () {\n    let {\n      searchField,\n      handleChange,\n      robots,\n      isPending,\n      error\n    } = this.props;\n    const filteredRobots = robots.filter( robot => robot.name.toLowerCase().includes( searchField.toLowerCase()));\n\n    return (\n      <div className=\"App tc\">\n        <Header/>\n        <SearchBox searchField={ searchField } handleChange={ handleChange }/>\n        <Scroll>\n          { isPending ? <h1>Loadnig...</h1> : (\n            <ErrorBoundary>\n              <CardList robots={ filteredRobots }/>\n            </ErrorBoundary>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect( mapStateToProps, mapDispatchToProps )( App );\n","import { SET_SEARCH_FIELD } from \"../constants\";\n\nexport const setSearchField = text => ({\n  type: SET_SEARCH_FIELD,\n  payload: text\n});\n","export const SET_SEARCH_FIELD = \"SET_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import {\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"../constants\";\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then( res => res.json())\n    .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch( err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_SEARCH_FIELD } from \"../constants\";\n\nconst initialState = {\n  searchField: \"\"\n};\n\nexport const searchRobots = ( state = initialState , action ) => {\n  switch ( action.type ) {\n    case SET_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload\n      };\n    default:\n      return state\n  }\n};\n","import {\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_PENDING\n} from \"../constants\";\n\nconst initialState = {\n  robots: [],\n  isPending: false,\n  error: \"\"\n};\n\nexport const requestRobots = ( state = initialState , action ) => {\n  switch ( action.type ) {\n    case REQUEST_ROBOTS_PENDING:\n      return {\n        ...state,\n        isPending: true\n      };\n    case REQUEST_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        robots: action.payload,\n        isPending: false\n      };\n    case REQUEST_ROBOTS_FAILED:\n      return {\n        ...state,\n        error: action.payload,\n        isPending: false\n      };\n    default:\n      return state\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport {\n  createStore,\n  applyMiddleware,\n  combineReducers\n} from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport App from './containers/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots } from \"./store/reducers/searchReducer\";\nimport { requestRobots } from \"./store/reducers/requestReducer\";\n\nimport './index.css';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(\n    thunk/*,\n    logger */\n  )\n);\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}